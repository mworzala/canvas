plugins {
    id 'org.jetbrains.kotlin.jvm' version "1.6.10"

    id 'maven-publish'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
}

group = "com.mattworzala"
archivesBaseName = "canvas"
version = "1.1.5"

allprojects {
    apply plugin: 'java'
    apply plugin: 'org.jetbrains.kotlin.jvm'

    repositories {
        mavenCentral()

        maven { url = 'https://jitpack.io' }
        maven { url = 'https://jcenter.bintray.com/' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        maven { url = 'https://libraries.minecraft.net' }
        maven { url = 'https://repo.velocitypowered.com/snapshots/' }
    }

    dependencies {
        compileOnly 'com.github.Minestom:Minestom:4ee5cbe424'
    }

    sourceCompatibility = '17'
    targetCompatibility = '17'

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        kotlinOptions.jvmTarget = "17"
        kotlinOptions.freeCompilerArgs = ["-Xinline-classes"]
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
            snapshotRepositoryUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")

            username = System.getenv("sonatypeUsername") ?: hasProperty("sonatypeUsername") ? sonatypeUsername : ''
            password = System.getenv("sonatypePassword") ?: hasProperty("sonatypePassword") ? sonatypePassword : ''
        }
    }
}

repositories {
}

dependencies {
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives sourcesJar, javadocJar
}

publishing {
    publications {
        release(MavenPublication) {
            from project.components.java
            artifact javadocJar
            artifact sourcesJar

            pom {
                name = 'canvas'
                description = 'An inventory framework for the Minestom server software'
                url = 'https://github.com/mworzala/canvas'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/mworzala/canvas/blob/master/LICENSE'
                    }
                }

                scm {
                    connection = 'scm:git:github.com/mworzala/canvas.git'
                    developerConnection = 'scm:git:ssh://github.com/mworzala/canvas.git'
                    url = 'https://github.com/mworzala/canvas/tree/main'
                }

                developers {
                    developer {
                        id = 'mworzala'
                        name = 'Matt Worzala'
                        email = 'admin@mattworzala.com'
                    }
                }
            }
        }
    }
}

signing {
    if (System.env['CI'] != null) {
        def signingKey = System.env['SIGNING_KEY']
        def signingPassword = System.env['SIGNING_PASSWORD']
        useInMemoryPgpKeys(signingKey, signingPassword)
    }
    sign publishing.publications
}
